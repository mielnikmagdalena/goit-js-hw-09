{"mappings":"ACmBA,MAAM,EAAO,SAAS,aAAA,CAAc,SAIpC,EAAK,gBAAA,CAAiB,SAAU,AAAA,IAC9B,EAAM,cAAN,GAEA,IAAM,EAAa,SAAS,aAAA,CAAc,uBACpC,EAAY,SAAS,aAAA,CAAc,sBACnC,EAAc,SAAS,aAAA,CAAc,wBAErC,EAAQ,SAAS,EAAW,KAAlC,EACM,EAAO,SAAS,EAAU,KAAhC,EACM,EAAS,SAAS,EAAY,KAApC,EAGA,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,IAAK,CAC/B,IAAM,EAAW,EAAI,EACf,EAAe,EAAQ,EAAI,EAKjC,AAvCJ,CAAA,SAAuB,CAAQ,CAAE,CAAK,EACpC,OAAO,IAAI,QAAQ,CAAC,EAAS,KAC3B,IAAM,EAAgB,KAAK,MAAA,GAAW,GAItC,WAAW,KACL,EACF,EAAQ,CAAE,SAAA,EAAU,MAAA,CAAM,GAE1B,EAAO,CAAE,SAAA,EAAU,MAAA,CAAM,EAE7B,EAAG,EACL,EACF,CAAA,EAyBkB,EAAU,GACrB,IAAA,CAAK,CAAC,CAAA,SAAE,CAAQ,CAAA,MAAE,CAAK,CAAE,IACxB,QAAQ,GAAA,CAAI,CAAC,oBAAoB,EAAE,EAAS,IAAI,EAAE,EAAM,EAAE,CAAC,CAC7D,GACC,KAAA,CAAM,CAAC,CAAA,SAAE,CAAQ,CAAA,MAAE,CAAK,CAAE,IACzB,QAAQ,GAAA,CAAI,CAAC,mBAAmB,EAAE,EAAS,IAAI,EAAE,EAAM,EAAE,CAAC,CAC5D,EACJ,CAEA,EAAK,KAAL,EACF","sources":["<anon>","src/js/03-promises.js"],"sourcesContent":["var $47d4ff9957288465$exports = {};\n//Definicja funkcji createPromise(position, delay):\n//Ta funkcja przyjmuje dwa argumenty, position i delay. Tworzy nowy obiekt Promise, który wykonuje asynchroniczne działanie.\n//Losuje wartość shouldResolve - wartość logiczną, która określa, czy obietnica powinna zostać rozwiązana czy odrzucona. Szansa na rozwiązanie obietnicy wynosi 70% (większa niż 0,3).\nfunction $47d4ff9957288465$var$createPromise(position, delay) {\n    return new Promise((resolve, reject)=>{\n        const shouldResolve = Math.random() > 0.3;\n        //Używam funkcji setTimeout do opóźnienia wykonania kodu wewnątrz obietnicy o wartość delay.\n        //Wewnątrz funkcji setTimeout sprawdzam wartość shouldResolve. Jeśli jest prawdziwa, obietnica zostaje rozwiązana za pomocą metody resolve(), przekazując obiekt { position, delay } jako wartość rozwiązania.\n        //W przeciwnym razie, obietnica zostaje odrzucona za pomocą metody reject(), przekazując ten sam obiekt jako powód odrzucenia.\n        setTimeout(()=>{\n            if (shouldResolve) resolve({\n                position: position,\n                delay: delay\n            });\n            else reject({\n                position: position,\n                delay: delay\n            });\n        }, delay);\n    });\n}\n//Pobranie referencji do formularza HTML za pomocą document.querySelector('.form').\nconst $47d4ff9957288465$var$form = document.querySelector(\".form\");\n//Dodanie nasłuchiwacza zdarzeń na formularzu dla zdarzenia \"submit\".\n//W obsłudze zdarzenia formularza:\n//Wyłączenie domyślnego zachowania formularza za pomocą event.preventDefault(), aby uniknąć przeładowania strony.\n$47d4ff9957288465$var$form.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    //Pobranie referencji do trzech pól wejściowych formularza: delayInput, stepInput i amountInput.\n    const delayInput = document.querySelector('input[name=\"delay\"]');\n    const stepInput = document.querySelector('input[name=\"step\"]');\n    const amountInput = document.querySelector('input[name=\"amount\"]');\n    //Pobranie wartości liczbowych z tych pól wejściowych za pomocą parseInt().\n    const delay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n    //Utworzenie pętli for o długości amount, która iteruje od zera do wartości: amount\n    //W każdej iteracji pętli tworzy się zmienna position równa i + 1 (pozycja iteracji) oraz promiseDelay równa delay + i * step (opóźnienie obietnicy zależne od iteracji).\n    for(let i = 0; i < amount; i++){\n        const position = i + 1;\n        const promiseDelay = delay + i * step;\n        //Wywołanie funkcji createPromise(position, promiseDelay), która zwraca obiekt Promise.\n        //Do obiektu Promise zostaje dołączone dwie metody: then() i catch().\n        //Metoda then() jest wywoływana, gdy obietnica zostanie rozwiązana, a metoda catch() jest wywoływana, gdy obietnica zostanie odrzucona.\n        //Wewnątrz metody then() lub catch() zostaje wyświetlony komunikat w konsoli, informujący o rozwiązaniu lub odrzuceniu obietnicy, wraz z informacjami o pozycji i opóźnieniu.\n        $47d4ff9957288465$var$createPromise(position, promiseDelay).then(({ position: position, delay: delay })=>{\n            console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }).catch(({ position: position, delay: delay })=>{\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n    //Na końcu kodu, po obsłudze zdarzenia, formularz jest resetowany za pomocą form.reset(), co powoduje wyczyszczenie wprowadzonych wartości w polach formularza.\n    $47d4ff9957288465$var$form.reset();\n});\n\n\n//# sourceMappingURL=03-promises.19826b10.js.map\n","//Definicja funkcji createPromise(position, delay):\n//Ta funkcja przyjmuje dwa argumenty, position i delay. Tworzy nowy obiekt Promise, który wykonuje asynchroniczne działanie.\n//Losuje wartość shouldResolve - wartość logiczną, która określa, czy obietnica powinna zostać rozwiązana czy odrzucona. Szansa na rozwiązanie obietnicy wynosi 70% (większa niż 0,3).\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    //Używam funkcji setTimeout do opóźnienia wykonania kodu wewnątrz obietnicy o wartość delay.\n    //Wewnątrz funkcji setTimeout sprawdzam wartość shouldResolve. Jeśli jest prawdziwa, obietnica zostaje rozwiązana za pomocą metody resolve(), przekazując obiekt { position, delay } jako wartość rozwiązania.\n    //W przeciwnym razie, obietnica zostaje odrzucona za pomocą metody reject(), przekazując ten sam obiekt jako powód odrzucenia.\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n//Pobranie referencji do formularza HTML za pomocą document.querySelector('.form').\nconst form = document.querySelector('.form');\n//Dodanie nasłuchiwacza zdarzeń na formularzu dla zdarzenia \"submit\".\n//W obsłudze zdarzenia formularza:\n//Wyłączenie domyślnego zachowania formularza za pomocą event.preventDefault(), aby uniknąć przeładowania strony.\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  //Pobranie referencji do trzech pól wejściowych formularza: delayInput, stepInput i amountInput.\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n  //Pobranie wartości liczbowych z tych pól wejściowych za pomocą parseInt().\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n  //Utworzenie pętli for o długości amount, która iteruje od zera do wartości: amount\n  //W każdej iteracji pętli tworzy się zmienna position równa i + 1 (pozycja iteracji) oraz promiseDelay równa delay + i * step (opóźnienie obietnicy zależne od iteracji).\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const promiseDelay = delay + i * step;\n    //Wywołanie funkcji createPromise(position, promiseDelay), która zwraca obiekt Promise.\n    //Do obiektu Promise zostaje dołączone dwie metody: then() i catch().\n    //Metoda then() jest wywoływana, gdy obietnica zostanie rozwiązana, a metoda catch() jest wywoływana, gdy obietnica zostanie odrzucona.\n    //Wewnątrz metody then() lub catch() zostaje wyświetlony komunikat w konsoli, informujący o rozwiązaniu lub odrzuceniu obietnicy, wraz z informacjami o pozycji i opóźnieniu.\n    createPromise(position, promiseDelay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  //Na końcu kodu, po obsłudze zdarzenia, formularz jest resetowany za pomocą form.reset(), co powoduje wyczyszczenie wprowadzonych wartości w polach formularza.\n  form.reset();\n});\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay","parseInt","value","step","amount","i","position","promiseDelay","$47d4ff9957288465$var$createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","console","log","catch","reset"],"version":3,"file":"03-promises.19826b10.js.map"}